# look at the actual data
print(all_deaths)
# print out a particular column with lots of NA's (tidyverse), view the first 10 rows
select(all_deaths[1:10,], book_of_death)
# base R version
# all_deaths$book_of_death
# use the is.na function to see what it recognises NA's as:
select(all_deaths[1:10,], book_of_death) %>% is.na()
# base R version
# is.na(all_deaths$book_of_death)
# select a few variables to keep
deaths <- select(all_deaths, name, allegiances, gender, nobility, year_of_death)
# get rid of the Name column
deaths_no_names <- select(all_deaths, -name)
# select all columns which relate to a book: different ways
books <- select(all_deaths, -name, -allegiances, -year_of_death, -gender, -nobility)
all_deaths %>%
select(starts_with("book"))
all_deaths %>%
select(contains("bo"))
# select the columns which are related to death.
death <- select(all_deaths, year_of_death, book_of_death)
# let's pick out one house of characters:
lannisters <- filter(deaths, allegiances == "Lannister")
# more than one lannister name : need to do this
lannisters <- filter(all_deaths, allegiances %in% c("House Lannister","Lannister"))
# female characters of that house
female_lannisters <- filter(lannisters, gender == 0)
# let's do a combo: noble lannister characters
noble_lannisters <- filter(deaths, allegiances == "Lannister", nobility == 1)
# Find where the `year_of_death`is less than or equal to 299.
filter(deaths,year_of_death <=299)
# Find the females who are not Lannisters
filter(deaths, allegiances != "Lannister", gender == 0)
# arrange it so all the females (gender = 0) come first
arrange(noble_lannisters, gender)
arrange(noble_lannisters, desc(gender))
arrange(noble_lannisters, desc(gender), desc(nobility))
# arrange `all_deaths` by `book_of_death`
book_death <- arrange(all_deaths, book_of_death)
# arrange `all_deaths` by `allegiances` and `book_intro_chapter`
double_arrange <- arrange(all_deaths, allegiances, book_intro_chapter)
# arrange `all_deaths` by descending `year_of_death`
death_arrange <- arrange(all_deaths, desc(year_of_death))
# create a new variable called years_survived, which calculates the year of death, minus the year 298.
deaths_year <- mutate(deaths, years_survived = year_of_death - 298)
# select our book columns
books <- select(all_deaths, book1_GoT, book2_CoK, book3_SoS, book4_FfC, book5_DwD)
# change them to character
char_books <- mutate_all(books, as.character)
char_books2 <- mutate_at(all_deaths, c("book1_GoT", "book2_CoK", "book3_SoS", "book4_FfC", "book5_DwD"), as.character)
# change all doubles to characters
if_books <- mutate_if(all_deaths, is.double, as.character)
# Add a new column which is a logical vector, which has TRUE if `book_intro_chapter` is empty, and FALSE if it isn't
is_book_empty <- mutate(all_deaths, my_test = is.na(book_intro_chapter))
is_book_empty
# Change the nobility column to a logical vector
mutate_at(all_deaths, "nobility", as.logical)
# change all doubles to integers
integers_data <- mutate_if(all_deaths, is.double, as.integer)
# group the death data by Allegiances
deaths_grouped <- group_by(deaths_year, allegiances)
# print the tibble out, and here you'll see at the top the number of groups you have created:
deaths_grouped
# now count the number of people in each group using the n() function
summarise(deaths_grouped, character_count = n())
# Also - you can use `summarise` or `summarize` - works both ways!
# drop the na's
deaths_no_na <- drop_na(deaths_grouped)
# summarise again
summarise(deaths_no_na, character_count = n())
book_deaths <- select(all_deaths, name, book1_GoT, book5_DwD)
book_survivals <- filter(book_deaths, book1_GoT==1 & book5_DwD ==1)
book_survivals
# remove na's
deaths_na_gone <- drop_na(all_deaths)
# group the deaths by book
book_deaths_grouped <- group_by(deaths_na_gone, book_of_death)
# summarise the number in each group
book_deaths_summarised <- summarise(book_deaths_grouped, death_count = n())
# calculate the percent and make a new column
book_deaths_percent <- mutate(book_deaths_summarised, percent = death_count / sum(death_count)*100 )
# arrange in descending order
arrange(book_deaths_percent, desc(percent))
# do the same analysis as above, but in pipe form
deaths_pipe <- deaths %>%
select(name, allegiances, gender, nobility, year_of_death) %>%
mutate(years_survived = year_of_death-298) %>%
group_by(allegiances) %>%
summarise(character_count = n()) %>%
arrange(desc(character_count))
deaths_pipe
all_deaths %>%
filter(nobility==1) %>%
group_by(allegiances) %>%
summarise(noble_count = n()) %>%
mutate(percent = noble_count / sum(noble_count)*100 ) %>%
arrange(desc(percent))
all_deaths %>%
drop_na()%>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
mutate(house_rank = min_rank(total_count_by_group)) %>%
filter(min_rank(total_count_by_group) <= 10) %>%
arrange(house_rank)
all_deaths %>%
drop_na()%>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
mutate(house_rank = min_rank(total_count_by_group)) %>%
filter(min_rank(total_count_by_group) <= 10) %>%
arrange(desc(house_rank))
all_deaths %>%
drop_na()%>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
mutate(house_rank = min_rank(total_count_by_group)) %>%
arrange(desc(house_rank))
all_deaths %>%
drop_na()%>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
mutate(house_rank = min_rank(total_count_by_group)) %>%
arrange(house_rank)
all_deaths %>%
drop_na()%>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
mutate(house_rank = min_rank(total_count_by_group)) %>%
arrange(desc(house_rank))
all_deaths %>%
select(allegiances, book_of_death) %>%
group_by(allegiances) %>%
summarise( n = n()) %>%
filter(cume_dist(desc(n)) < 0.50) %>%
arrange(desc(n))
all_deaths %>%
select(allegiances, book_of_death) %>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
filter(cume_dist(desc(total_count_by_group)) < 0.50) %>%
arrange(desc(total_count_by_group))
all_deaths %>%
select(allegiances, book_of_death) %>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
mutate(testing = cume_dist(total_count_by_group))
all_deaths %>%
select(allegiances, book_of_death) %>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
mutate(distribution_score = cume_dist(total_count_by_group)) %>%
#filter(cume_dist(desc(total_count_by_group)) < 0.50) %>%
arrange(desc(distribution_score))
?cume_dist
all_deaths
all_deaths %>%
select(allegiances, book_of_death) %>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
mutate(distribution_score = cume_dist(total_count_by_group)) %>%
#filter(distribution_score < 0.50) %>%
arrange(desc(distribution_score))
test <- all_deaths %>%
select(allegiances, book_of_death) %>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
mutate(distribution_score = cume_dist(total_count_by_group)) %>%
#filter(distribution_score < 0.50) %>%
arrange(desc(distribution_score))
hist(test$distribution_score)
hist(test)
test <- all_deaths %>%
select(allegiances, book_of_death) %>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
mutate(distribution_score = cume_dist(total_count_by_group)) %>%
#filter(distribution_score < 0.50) %>%
arrange(desc(distribution_score))
hist(total_count_by_group)
hist(test$total_count_by_group)
test <- all_deaths %>%
select(allegiances, book_of_death) %>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
mutate(distribution_score = cume_dist(total_count_by_group)) %>%
#filter(distribution_score < 0.50) %>%
arrange(desc(distribution_score))
all_deaths %>%
select(allegiances, book_of_death) %>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
mutate(distribution_score = cume_dist(total_count_by_group)) %>%
#filter(distribution_score < 0.50) %>%
arrange(desc(distribution_score))
all_deaths %>%
select(allegiances, book_of_death) %>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
mutate(distribution_score = cume_dist(total_count_by_group)) %>%
filter(distribution_score < 0.50) %>%
arrange(desc(distribution_score))
all_deaths %>%
select(allegiances, book_of_death) %>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
mutate(distribution_score = cume_dist(total_count_by_group)) %>%
filter(distribution_score > 0.50) %>%
arrange(desc(distribution_score))
all_deaths %>%
drop_na()%>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
mutate(house_rank = min_rank(total_count_by_group)) %>%
arrange(house_rank)
all_deaths %>%
drop_na()%>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
mutate(house_rank = min_rank(total_count_by_group)) %>%
arrange(desc(house_rank))
?between
all_deaths %>%
drop_na()%>%
group_by(allegiances) %>%
summarise(total_count_by_group = n())
all_deaths %>%
drop_na()%>%
group_by(allegiances) %>%
summarise(total_count_by_group = n())
all_deaths %>%
drop_na()%>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
arrange(desc())
all_deaths %>%
drop_na()%>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
arrange(desc(total_count_by_group))
all_deaths %>%
drop_na()%>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
between(10, 50)
all_deaths %>%
drop_na()%>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
between(total_count_by_group, 10, 50)
test<- all_deaths %>%
drop_na()%>%
group_by(allegiances) %>%
summarise(total_count_by_group = n())
between(test$total_count_by_group, 10,20)
dim(test)
test<- all_deaths %>%
drop_na()%>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
between(total_count_by_group,10,20)
test %>%
between(total_count_by_group,10,20)
test %>% between(total_count_by_group,10,20)
test %>% between(10,20)
test<- all_deaths %>%
drop_na()%>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
select(total_count_by_group) %>%
between(10,20)
test<- all_deaths %>%
drop_na()%>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
select(total_count_by_group) %>%
between(total_count_by_group,10,20)
test<- all_deaths %>%
drop_na()%>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
select(total_count_by_group) %>%
between(total_count_by_group,10)
all_deaths %>%
drop_na() %>%
select(allegiances, death_chapter) %>%
group_by(allegiances) %>%
summarise(count = n()) %>%
filter(count > mean(count))
all_deaths %>%
select(allegiances, book_of_death) %>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
mutate(distribution_score = cume_dist(total_count_by_group)) %>%
filter(distribution_score > 0.50) %>%
arrange(desc(distribution_score))
distribution_deaths <- all_deaths %>%
select(allegiances, book_of_death) %>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
mutate(distribution_score = cume_dist(total_count_by_group)) %>%
filter(distribution_score > 0.50) %>%
arrange(desc(distribution_score))
test <- all_deaths %>%
drop_na()%>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
mutate(testing = between(total_count_by_group,10,29))
test
all_deaths %>%
drop_na()%>%
group_by(allegiances) %>%
summarise(total_count_by_group = n()) %>%
mutate(between_values = between(total_count_by_group,10,50))
names(all_deaths)
head(all_deaths,1)
all_deaths
all_deaths %>%
select(allegiances, death_chapter) %>%
mutate(between_values = between(death_chapter,30,50))
all_deaths %>%
select(allegiances, death_chapter) %>%
drop_na() %>%
mutate(between_values = between(death_chapter,30,50))
all_deaths %>%
select(name, death_chapter) %>%
drop_na() %>%
mutate(between_values = between(death_chapter,30,50)) %>%
filter(between_values == TRUE)
knitr::opts_chunk$set(echo = TRUE)
# load the data in
drinks_content <- read_csv("data/starbucks_drinkMenu_expanded.csv")
# first 5 rows
head(drinks_content,5)
# last 5 rows
tail(drinks_content,5)
# print the data out
drinks_content
# get the dimensions
dim(drinks_content)
# get variable names
names(drinks_content)
# make a boxplot of outliers
boxplot(drinks_content$Calories)
## yep, seems I have an outlier...
# get the outliers
outliers <- boxplot(drinks_content$Calories, plot=FALSE)$out
print(outliers)
## I only have one, and it's pretty high, BUT... some drinks probably have loads more calories than others. So i'll keep it in.
# # if you did remove it, you might do it this way:
# # remove them
# drinks_content[which(drinks_content$Calories %in% outliers),]
#
# # Now you can remove the rows containing the outliers, one possible option is:
# drinks_content_nooutlier <- drinks_content[-which(drinks_content$Calories %in% outliers),]
#
# # check now outliers are gone
# boxplot(drinks_content_nooutlier$Calories)
# select the variables
drinks <- select(drinks_content, Beverage_category, Beverage, Beverage_prep, Calories)
# check for NA's
is.na(drinks$Calories)
# no NA values, so we're all good
# filter the data
espresso_drinks <- filter(drinks, Beverage_category == "Classic Espresso Drinks")
# create a new variable
drink_calories <- mutate(espresso_drinks, calorie_diff = 135 - Calories)
# group the data
drinks_grouped <- group_by(drink_calories, Beverage_prep)
# summarise the data
drinks_summary <- summarise(drinks_grouped, mean_cal = mean(Calories))
# arrange in descending order
arrange(drinks_summary,desc(mean_cal))
# pipe everything
drinks_pipe <- drinks_content %>%
select(Beverage_category, Beverage, Beverage_prep, Calories) %>%
filter(Beverage_category == "Classic Espresso Drinks") %>%
mutate(calorie_diff = 135 - Calories) %>%
group_by(Beverage_prep) %>%
summarise(mean_cal = mean(Calories)) %>%
arrange(desc(mean_cal))
# calculate least calories
least_calories <- drink_calories %>%
arrange(Calories) %>%
mutate(ranking = min_rank(Calories)) %>%
filter(ranking <=2)
# calculate most calories
most_calories <- drink_calories %>%
mutate(ranking = min_rank(desc(Calories))) %>%
filter(ranking <=2)
above_average_calories <- drinks_grouped %>%
filter(Calories > mean(Calories))
drinks_distribution <- drinks_grouped %>%
filter(cume_dist(desc(Calories)) < 0.25)
drinks_distribution
drinks_distribution <- drinks_grouped %>%
filter(cume_dist(desc(Calories)) < 0.25)
drinks_distribution
drinks_distribution <- drinks_grouped %>%
filter(cume_dist(desc(Calories)) < 0.25) %>%
select(Beverage_prep)
drinks_distribution
names(drinks_distribution)
drinks_distribution <- drinks_grouped %>%
filter(cume_dist(desc(Calories)) < 0.25)
names(drinks_distribution)
drinks_distribution <- drinks_grouped %>%
filter(cume_dist(desc(Calories)) < 0.25) %>%
select(Beverage_category,Beverage_prep)
drinks_distribution
install.packages("MuMIn")
library(MuMIn)
# calculate least calories
least_calories <- drink_calories %>%
arrange(Calories) %>%
mutate(ranking = min_rank(Calories)) %>%
filter(ranking <=2)
least_calories
# find the top 10 destinations
top_destinations <- flights %>%
group_by(dest) %>%
summarise(flight_count = n()) %>%
arrange(desc(flight_count)) %>%
filter(row_number() <= 10)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
# load the data in
drinks_content <- read_csv("data/starbucks_drinkMenu_expanded.csv")
# first 5 rows
head(drinks_content,5)
# last 5 rows
tail(drinks_content,5)
# print the data out
drinks_content
# get the dimensions
dim(drinks_content)
# get variable names
names(drinks_content)
# check the descriptive stats
summary(drinks_content$Calories)
# histogram
hist(drinks_content$Calories)
# make a boxplot of outliers
boxplot(drinks_content$Calories)
## yep, seems I have an outlier...
# get the outliers
outliers <- boxplot(drinks_content$Calories, plot=FALSE)$out
print(outliers)
## I only have one, and it's pretty high, BUT... some drinks probably have loads more calories than others. So i'll keep it in.
# # if you did remove it, you might do it this way:
# # remove them
# drinks_content[which(drinks_content$Calories %in% outliers),]
#
# # Now you can remove the rows containing the outliers, one possible option is:
# drinks_content_nooutlier <- drinks_content[-which(drinks_content$Calories %in% outliers),]
#
# # check now outliers are gone
# boxplot(drinks_content_nooutlier$Calories)
# select the variables
drinks <- select(drinks_content, Beverage_category, Beverage, Beverage_prep, Calories)
# check for NA's
is.na(drinks$Calories)
# no NA values, so we're all good
# filter the data
espresso_drinks <- filter(drinks, Beverage_category == "Classic Espresso Drinks")
# create a new variable
drink_calories <- mutate(espresso_drinks, calorie_diff = 135 - Calories)
# group the data
drinks_grouped <- group_by(drink_calories, Beverage_prep)
# summarise the data
drinks_summary <- summarise(drinks_grouped, mean_cal = mean(Calories))
# arrange in descending order
arrange(drinks_summary,desc(mean_cal))
# pipe everything
drinks_pipe <- drinks_content %>%
select(Beverage_category, Beverage, Beverage_prep, Calories) %>%
filter(Beverage_category == "Classic Espresso Drinks") %>%
mutate(calorie_diff = 135 - Calories) %>%
group_by(Beverage_prep) %>%
summarise(mean_cal = mean(Calories)) %>%
arrange(desc(mean_cal))
# calculate least calories
least_calories <- drink_calories %>%
arrange(Calories) %>%
mutate(ranking = min_rank(Calories)) %>%
filter(ranking <=2)
# calculate most calories
most_calories <- drink_calories %>%
mutate(ranking = min_rank(desc(Calories))) %>%
filter(ranking <=2)
above_average_calories <- drinks_grouped %>%
filter(Calories > mean(Calories))
drinks_distribution <- drinks_grouped %>%
filter(cume_dist(desc(Calories)) < 0.25) %>%
select(Beverage_category,Beverage_prep)
drinks_distribution
names(drinks_distribution)
weather_join <- left_join(flights, weather, by=c("origin","time_hour"))
location <- flights %>%
inner_join(airports, by=c("origin"="faa")) %>%
inner_join(airports, by=c("dest"="faa"))
# find the top 10 destinations
top_destinations <- flights %>%
group_by(dest) %>%
summarise(flight_count = n()) %>%
arrange(desc(flight_count)) %>%
filter(row_number() <= 10)
top_destinations
# could use a semi_join or an inner join to only keep flights destination that match the top 10
flights %>%
semi_join(top_destinations)
